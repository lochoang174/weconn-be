syntax = "proto3";

package bot_crud;

service BotCrudService {
  rpc ListVectors(ListVectorsRequest) returns (ListVectorsResponse);
  rpc RemoveVectors(RemoveRequest) returns (RemoveResponse);

  rpc DetectFacesPublic(FaceDetectRequest) returns (FaceDetectResponse);
  rpc DetectFacesPrivate(FaceDetectRequestPrivate) returns (FaceDetectPrivateResponse);

  rpc SearchFacePublic(SearchFaceRequest) returns (FaceSearchResponse);
  rpc SearchFacePrivate(SearchFacePrivateRequest) returns (FaceSearchPrivateResponse);

  rpc CreateBot (CreateBotRequest) returns (BotResponse);
  rpc UpdateBot (UpdateBotRequest) returns (BotResponse);
  rpc DeleteBot (DeleteBotRequest) returns (DeleteBotResponse);
  rpc GetAllBots (GetAllBotsRequest) returns (GetAllBotsResponse);
  rpc UpdateAllBotCredentials (UpdateAllBotCookieUrlRequest) returns (UpdateAllBotCookieUrlResponse);

  rpc CheckUrlExists(CheckUrlRequest) returns (CheckUrlResponse);
  rpc SaveVector(SaveVectorRequest) returns (SaveVectorResponse);

  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);
  rpc GetDetailHistory(GetDetailHistoryRequest) returns (GetDetailHistoryResponse);
}

message CheckUrlRequest {
  string url = 1;
}

message CheckUrlResponse {
  bool exists = 1;
}

message SaveVectorRequest {
  string url = 1;
  string name = 2;
  string picture = 3;
  string headline = 4;
  string location = 5;
  string current_company = 6;
  string education = 7;
}

message SaveVectorResponse {
  string id = 1;
}

message FaceBox {
  int32 x = 1;
  int32 y = 2;
  int32 width = 3;
  int32 height = 4;
  float confidence = 5;
}

message FaceBoxPrivate {
  int32 x = 1;
  int32 y = 2;
  int32 width = 3;
  int32 height = 4;
  float confidence = 5;
  string history_detail_id = 6;
}

message FaceDetectRequest {
  string url = 1;
}
message FaceDetectRequestPrivate {
  string url = 1;
  string userId = 2;
}
message FaceDetectResponse {
  string url = 1;
  repeated FaceBox faces = 2;
}

message FaceDetectPrivateResponse {
  string url = 1;
  string history_id = 2;
  repeated FaceBoxPrivate faces = 3;
}

message SearchFaceRequest {
  string url = 1;
}

message SearchFacePrivateRequest {
  string url = 1;
  string history_detail_id = 2;
}

message FaceSearchDocument {
  string url = 1;
  string name = 2;
  string picture = 3;
  string headline = 4;
  string location = 5;
  string current_company = 6;
  string education = 7;
  string created_at = 8;
}

message FaceSearchResult {
  FaceSearchDocument document = 1;
  string similarity_score = 2;
  float raw_score = 3;
  float actual_cosine = 4;
  string id = 5;
}

message FaceSearchPrivateResult {
  FaceSearchDocument document = 1;
  string similarity_score = 2;
  float raw_score = 3;
  float actual_cosine = 4;
  string id = 5;
}

message FaceSearchResponse {
  repeated FaceSearchResult results = 1;
}

message FaceSearchPrivateResponse {
  repeated FaceSearchPrivateResult results = 1;
  string history_detail_id = 2;
  int32 status = 3;
  bool isExist = 4;
}

message Bot {
  string bot_id = 1;
  string cookie_url = 2;
}

message CreateBotRequest {
  string bot_id = 1;
  string cookie_url = 2;
}

message UpdateBotRequest {
  string bot_id = 1;
  string cookie_url = 2;
}

message DeleteBotRequest {
  string id = 1;
}

message DeleteBotResponse {
  string message = 1;
}

message GetAllBotsRequest {}

message GetAllBotsResponse {
  repeated Bot bots = 1;
}

message UpdateAllBotCookieUrlRequest {
  string cookie_url = 1;
}

message UpdateAllBotCookieUrlResponse {
  string message = 1;
}

message BotResponse {
  Bot bot = 1;
}

message GetHistoryRequest {
  string userId = 1;
}

message HistoryItem {
  string history_id = 1;
  string original_image = 2;
  string created_at = 3;
}

message GetHistoryResponse {
  repeated HistoryItem histories = 1;
}

message GetDetailHistoryRequest {
  string history_id = 1;
}

message GetDetailHistoryResponseElement {
  repeated FaceSearchPrivateResult results = 1;
  string history_detail_id = 2;
  int32 status = 3;
  FaceBoxPrivate faces = 4;
}
message GetDetailHistoryResponse {
  repeated GetDetailHistoryResponseElement results = 1;
  string url =2;
}
message ListVectorsRequest {
  int32 page = 1;       // Số trang muốn lấy (ví dụ: 1, 2, 3, ...)
  int32 page_size = 2;  // Số lượng item trên mỗi trang (ví dụ: 10)
}

// Message chứa thông tin chi tiết của một document
// Tương ứng với một object trong mảng 'data' của response JSON
message VectorData {
  string id = 1;                // ID của document trong Elasticsearch
  string url = 2;                 // URL LinkedIn
  string name = 3;                // Tên
  string picture = 4;             // URL ảnh trên Cloudinary
  string headline = 5;            // Dòng tiêu đề
  string location = 6;            // Vị trí
  string current_company = 7;     // Công ty hiện tại
  optional string education = 8;  // Học vấn (có thể null, nên dùng optional)
  string created_at = 9;          // Thời gian tạo (dạng chuỗi ISO 8601)
}

message RemoveRequest{
  repeated string req = 1;
}

message RemoveResponse  {
  bool res = 1;
}
// Message cho response, cấu trúc tương tự như JSON bạn đã cung cấp
message ListVectorsResponse {
  repeated VectorData data = 1; // Danh sách các document trả về
  int32 total_items = 2;        // Tổng số item có trong database
  int32 total_pages = 3;        // Tổng số trang
  int32 current_page = 4;       // Trang hiện tại được trả về
}