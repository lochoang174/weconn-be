// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/bot-crud.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "bot_crud";

export interface CheckUrlRequest {
  url: string;
}

export interface CheckUrlResponse {
  exists: boolean;
}

export interface SaveVectorRequest {
  url: string;
  name: string;
  picture: string;
  headline: string;
  location: string;
  currentCompany: string;
  education: string;
}

export interface SaveVectorResponse {
  id: string;
}

export interface FaceBox {
  x: number;
  y: number;
  width: number;
  height: number;
  confidence: number;
}

export interface FaceBoxPrivate {
  x: number;
  y: number;
  width: number;
  height: number;
  confidence: number;
  historyDetailId: string;
}

export interface FaceDetectRequest {
  url: string;
}

export interface FaceDetectRequestPrivate {
  url: string;
  userId: string;
}

export interface FaceDetectResponse {
  url: string;
  faces: FaceBox[];
}

export interface FaceDetectPrivateResponse {
  url: string;
  historyId: string;
  faces: FaceBoxPrivate[];
}

export interface SearchFaceRequest {
  url: string;
}

export interface SearchFacePrivateRequest {
  url: string;
  historyDetailId: string;
}

export interface FaceSearchDocument {
  url: string;
  name: string;
  picture: string;
  headline: string;
  location: string;
  currentCompany: string;
  education: string;
  createdAt: string;
}

export interface FaceSearchResult {
  document: FaceSearchDocument | undefined;
  similarityScore: string;
  rawScore: number;
  actualCosine: number;
  id: string;
}

export interface FaceSearchPrivateResult {
  document: FaceSearchDocument | undefined;
  similarityScore: string;
  rawScore: number;
  actualCosine: number;
  id: string;
}

export interface FaceSearchResponse {
  results: FaceSearchResult[];
}

export interface FaceSearchPrivateResponse {
  results: FaceSearchPrivateResult[];
  historyDetailId: string;
  status: number;
  isExist: boolean;
}

export interface Bot {
  botId: string;
  cookieUrl: string;
}

export interface CreateBotRequest {
  botId: string;
  cookieUrl: string;
}

export interface UpdateBotRequest {
  botId: string;
  cookieUrl: string;
}

export interface DeleteBotRequest {
  id: string;
}

export interface DeleteBotResponse {
  message: string;
}

export interface GetAllBotsRequest {
}

export interface GetAllBotsResponse {
  bots: Bot[];
}

export interface UpdateAllBotCookieUrlRequest {
  cookieUrl: string;
}

export interface UpdateAllBotCookieUrlResponse {
  message: string;
}

export interface BotResponse {
  bot: Bot | undefined;
}

export interface GetHistoryRequest {
  userId: string;
}

export interface HistoryItem {
  historyId: string;
  originalImage: string;
  createdAt: string;
}

export interface GetHistoryResponse {
  histories: HistoryItem[];
}

export interface GetDetailHistoryRequest {
  historyId: string;
}

export interface GetDetailHistoryResponseElement {
  results: FaceSearchPrivateResult[];
  historyDetailId: string;
  status: number;
  faces: FaceBoxPrivate | undefined;
}

export interface GetDetailHistoryResponse {
  results: GetDetailHistoryResponseElement[];
  url: string;
}

export interface ListVectorsRequest {
  /** Số trang muốn lấy (ví dụ: 1, 2, 3, ...) */
  page: number;
  /** Số lượng item trên mỗi trang (ví dụ: 10) */
  pageSize: number;
}

/**
 * Message chứa thông tin chi tiết của một document
 * Tương ứng với một object trong mảng 'data' của response JSON
 */
export interface VectorData {
  /** ID của document trong Elasticsearch */
  id: string;
  /** URL LinkedIn */
  url: string;
  /** Tên */
  name: string;
  /** URL ảnh trên Cloudinary */
  picture: string;
  /** Dòng tiêu đề */
  headline: string;
  /** Vị trí */
  location: string;
  /** Công ty hiện tại */
  currentCompany: string;
  /** Học vấn (có thể null, nên dùng optional) */
  education?:
    | string
    | undefined;
  /** Thời gian tạo (dạng chuỗi ISO 8601) */
  createdAt: string;
}

export interface RemoveRequest {
  req: string[];
}

export interface RemoveResponse {
  res: boolean;
}

/** Message cho response, cấu trúc tương tự như JSON bạn đã cung cấp */
export interface ListVectorsResponse {
  /** Danh sách các document trả về */
  data: VectorData[];
  /** Tổng số item có trong database */
  totalItems: number;
  /** Tổng số trang */
  totalPages: number;
  /** Trang hiện tại được trả về */
  currentPage: number;
}

export const BOT_CRUD_PACKAGE_NAME = "bot_crud";

export interface BotCrudServiceClient {
  listVectors(request: ListVectorsRequest): Observable<ListVectorsResponse>;

  removeVectors(request: RemoveRequest): Observable<RemoveResponse>;

  detectFacesPublic(request: FaceDetectRequest): Observable<FaceDetectResponse>;

  detectFacesPrivate(request: FaceDetectRequestPrivate): Observable<FaceDetectPrivateResponse>;

  searchFacePublic(request: SearchFaceRequest): Observable<FaceSearchResponse>;

  searchFacePrivate(request: SearchFacePrivateRequest): Observable<FaceSearchPrivateResponse>;

  createBot(request: CreateBotRequest): Observable<BotResponse>;

  updateBot(request: UpdateBotRequest): Observable<BotResponse>;

  deleteBot(request: DeleteBotRequest): Observable<DeleteBotResponse>;

  getAllBots(request: GetAllBotsRequest): Observable<GetAllBotsResponse>;

  updateAllBotCredentials(request: UpdateAllBotCookieUrlRequest): Observable<UpdateAllBotCookieUrlResponse>;

  checkUrlExists(request: CheckUrlRequest): Observable<CheckUrlResponse>;

  saveVector(request: SaveVectorRequest): Observable<SaveVectorResponse>;

  getHistory(request: GetHistoryRequest): Observable<GetHistoryResponse>;

  getDetailHistory(request: GetDetailHistoryRequest): Observable<GetDetailHistoryResponse>;
}

export interface BotCrudServiceController {
  listVectors(
    request: ListVectorsRequest,
  ): Promise<ListVectorsResponse> | Observable<ListVectorsResponse> | ListVectorsResponse;

  removeVectors(request: RemoveRequest): Promise<RemoveResponse> | Observable<RemoveResponse> | RemoveResponse;

  detectFacesPublic(
    request: FaceDetectRequest,
  ): Promise<FaceDetectResponse> | Observable<FaceDetectResponse> | FaceDetectResponse;

  detectFacesPrivate(
    request: FaceDetectRequestPrivate,
  ): Promise<FaceDetectPrivateResponse> | Observable<FaceDetectPrivateResponse> | FaceDetectPrivateResponse;

  searchFacePublic(
    request: SearchFaceRequest,
  ): Promise<FaceSearchResponse> | Observable<FaceSearchResponse> | FaceSearchResponse;

  searchFacePrivate(
    request: SearchFacePrivateRequest,
  ): Promise<FaceSearchPrivateResponse> | Observable<FaceSearchPrivateResponse> | FaceSearchPrivateResponse;

  createBot(request: CreateBotRequest): Promise<BotResponse> | Observable<BotResponse> | BotResponse;

  updateBot(request: UpdateBotRequest): Promise<BotResponse> | Observable<BotResponse> | BotResponse;

  deleteBot(request: DeleteBotRequest): Promise<DeleteBotResponse> | Observable<DeleteBotResponse> | DeleteBotResponse;

  getAllBots(
    request: GetAllBotsRequest,
  ): Promise<GetAllBotsResponse> | Observable<GetAllBotsResponse> | GetAllBotsResponse;

  updateAllBotCredentials(
    request: UpdateAllBotCookieUrlRequest,
  ): Promise<UpdateAllBotCookieUrlResponse> | Observable<UpdateAllBotCookieUrlResponse> | UpdateAllBotCookieUrlResponse;

  checkUrlExists(request: CheckUrlRequest): Promise<CheckUrlResponse> | Observable<CheckUrlResponse> | CheckUrlResponse;

  saveVector(
    request: SaveVectorRequest,
  ): Promise<SaveVectorResponse> | Observable<SaveVectorResponse> | SaveVectorResponse;

  getHistory(
    request: GetHistoryRequest,
  ): Promise<GetHistoryResponse> | Observable<GetHistoryResponse> | GetHistoryResponse;

  getDetailHistory(
    request: GetDetailHistoryRequest,
  ): Promise<GetDetailHistoryResponse> | Observable<GetDetailHistoryResponse> | GetDetailHistoryResponse;
}

export function BotCrudServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "listVectors",
      "removeVectors",
      "detectFacesPublic",
      "detectFacesPrivate",
      "searchFacePublic",
      "searchFacePrivate",
      "createBot",
      "updateBot",
      "deleteBot",
      "getAllBots",
      "updateAllBotCredentials",
      "checkUrlExists",
      "saveVector",
      "getHistory",
      "getDetailHistory",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BotCrudService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BotCrudService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOT_CRUD_SERVICE_NAME = "BotCrudService";
