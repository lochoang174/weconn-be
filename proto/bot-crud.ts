// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/bot-crud.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "bot";

export interface Bot {
  /** Mongo ObjectID (hoặc bot_id) */
  id: string;
  botId: string;
  error: string;
  email: string;
  password: string;
}

export interface CreateBotRequest {
  botId: string;
  email: string;
  password: string;
}

export interface UpdateBotRequest {
  id: string;
  email: string;
  password: string;
  status: string;
  error: string;
}

export interface DeleteBotRequest {
  id: string;
}

export interface DeleteBotResponse {
  message: string;
}

export interface GetAllBotsRequest {
}

export interface GetAllBotsResponse {
  bots: Bot[];
}

export interface UpdateAllBotCredentialsRequest {
  email: string;
  password: string;
}

export interface UpdateAllBotCredentialsResponse {
  /** số lượng bot đã được update */
  message: string;
}

export interface BotResponse {
  bot: Bot | undefined;
}

export const BOT_PACKAGE_NAME = "bot";

export interface BotServiceClient {
  createBot(request: CreateBotRequest): Observable<BotResponse>;

  updateBot(request: UpdateBotRequest): Observable<BotResponse>;

  deleteBot(request: DeleteBotRequest): Observable<DeleteBotResponse>;

  getAllBots(request: GetAllBotsRequest): Observable<GetAllBotsResponse>;

  updateAllBotCredentials(request: UpdateAllBotCredentialsRequest): Observable<UpdateAllBotCredentialsResponse>;
}

export interface BotServiceController {
  createBot(request: CreateBotRequest): Promise<BotResponse> | Observable<BotResponse> | BotResponse;

  updateBot(request: UpdateBotRequest): Promise<BotResponse> | Observable<BotResponse> | BotResponse;

  deleteBot(request: DeleteBotRequest): Promise<DeleteBotResponse> | Observable<DeleteBotResponse> | DeleteBotResponse;

  getAllBots(
    request: GetAllBotsRequest,
  ): Promise<GetAllBotsResponse> | Observable<GetAllBotsResponse> | GetAllBotsResponse;

  updateAllBotCredentials(
    request: UpdateAllBotCredentialsRequest,
  ):
    | Promise<UpdateAllBotCredentialsResponse>
    | Observable<UpdateAllBotCredentialsResponse>
    | UpdateAllBotCredentialsResponse;
}

export function BotServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createBot", "updateBot", "deleteBot", "getAllBots", "updateAllBotCredentials"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BotService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BotService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOT_SERVICE_NAME = "BotService";
