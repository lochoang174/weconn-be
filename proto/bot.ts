// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: proto/bot.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "bot";

/** Gói tin từ client gửi lên */
export interface BotCommand {
  /** START or STOP */
  type: BotCommand_CommandType;
  /** ID của bot (tùy bạn thiết kế) */
  botId: string;
}

export enum BotCommand_CommandType {
  START = 0,
  STOP = 1,
  UNRECOGNIZED = -1,
}

/** Gói tin server stream về client */
export interface BotLog {
  botId: string;
  message: string;
}

export const BOT_PACKAGE_NAME = "bot";

/** gRPC Service */

export interface BotServiceClient {
  streamBotCrawlUrl(request: Observable<BotCommand>): Observable<BotLog>;

  streamBotCrawlDetail(request: Observable<BotCommand>): Observable<BotLog>;
}

/** gRPC Service */

export interface BotServiceController {
  streamBotCrawlUrl(request: Observable<BotCommand>): Observable<BotLog>;

  streamBotCrawlDetail(request: Observable<BotCommand>): Observable<BotLog>;
}

export function BotServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BotService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["streamBotCrawlUrl", "streamBotCrawlDetail"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BotService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOT_SERVICE_NAME = "BotService";
